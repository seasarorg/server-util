#!/bin/sh
#
# Migration tool for Seasar Project
#
# @author Jun Futagawa

# - Configuration format
# committer-name: yourname
# name: projectname
# svnroot: https://www.seasar.org/svn/projectname/
# trunk: trunk
# tags: tags
# branches: branches
# ignore-paths: '^trunk/www/'
# option.remove-git-svn-id: 0
# option.replace-empty-commit-messages: 0
# option.replace-empty-commit-messages.string: '<empty commit message>'
# option.migrate-branches: name-1.x,name-2.x
# option.no-convert-ignore-file: 0
# option.no-convert-empty-directory: 0
# option.no-convert-git-style-tag: 0
# option.no-prune-empty: 0
# option.no-migrate-branches: 0
# option.no-migrate-tags: 0

SCRIPT="$(basename "${0}")"
SCRIPT_DIR="$(dirname ${0} | pwd)"
CONF_DIR="${SCRIPT_DIR}/conf"
WORK_DIR="${SCRIPT_DIR}/work"

REPOSITORIES=$(ls "${CONF_DIR}")

REPOSITORY_PREFIX=""
REPOSITORY_SUFFIX=""

# - Author file
# name1 = Full Name <user@example.org>
ALL_AUTHORS_FILE="${WORK_DIR}/all-authors.txt"
GIT_COMMIT_GITIGNORE_FILES_MESSAGE="Added .gitignore files"

debug() {
    if [[ ${DEBUG} ]]
    then
        echo ">>> $*"
    fi
}

# Usage
usage() {
    cat << _EOF_

Usage:
    ${SCRIPT} [-a|-r package] [-p prefix] [-s suffix]

Options:
    -a Migrate all repositories
    -r Migrate the specified repository only. Available packages are:
        $(echo ${REPOSITORIES} | xargs)
    -p prefix for new repository name
    -s suffix for new repository name

_EOF_
}

# Get configuration value
get_config() {
    CONFIG_FILE="${1}"
    PARAMETER_NAME="${2}"
    IS_REQUIRED="${3:-0}"

    get_config=$(cat ${CONFIG_FILE} | egrep "^${PARAMETER_NAME}" | awk '{ print $2 }')
    debug "${PARAMETER_NAME}: ${get_config}"

    if [[ ${IS_REQUIRED} -eq 1 ]] && [[ -z ${get_config} ]]; then
        echo "${CONFIG_FILE}: ${PARAMETER_NAME} is required!"
        exit 1;
    fi
}

get_author_info() {
    MEMBER_UID="${1}"

    GIT_USER=$(grep "${MEMBER_UID}" "${ALL_AUTHORS_FILE}")
    if [[ -z "${GIT_USER}" ]]; then
        get_author_info="${MEMBER_UID} = ${MEMBER_UID} <${MEMBER_UID}@${PROJECT_SVN_UUID}>"
    else
        get_author_info="${GIT_USER}"
    fi
}

# Migrate repository
migrate_repository() {
    REPOSITORY="${1}"
    REPOSITORY_NAME="${REPOSITORY_PREFIX}${REPOSITORY}${REPOSITORY_SUFFIX}"

    CONFIG_FILE="${CONF_DIR}/${REPOSITORY}"

    # get configuration values (required)
    get_config "${CONFIG_FILE}" "committer-name" 1; COMMITER_NAME=${get_config}
    get_config "${CONFIG_FILE}" "name" 1          ; NAME=${get_config}
    get_config "${CONFIG_FILE}" "svnroot" 1       ; SVNROOT=${get_config}

    # get configuration values (optional)
    get_config "${CONFIG_FILE}" "trunk"           ; TRUNK=${get_config:-"trunk"}
    get_config "${CONFIG_FILE}" "tags"            ; TAGS=${get_config:-"tags"}
    get_config "${CONFIG_FILE}" "branches"        ; BRANCHES=${get_config:-"branches"}
    get_config "${CONFIG_FILE}" "ignore-paths"    ; IGNORE_PATHS=${get_config:-""}
    get_config "${CONFIG_FILE}" "option.remove-git-svn-id"       ; IS_REMOVE_GIT_SVN_ID=${get_config:-0}
    get_config "${CONFIG_FILE}" "option.replace-empty-commit-messages"; IS_REPLACE_EMPTY_COMMIT_MESSAGES=${get_config:-0}
    get_config "${CONFIG_FILE}" "option.replace-empty-commit-messages.string"; REPLACE_EMPTY_COMMIT_MESSAGES_STRING=${get_config:-'<empty commit message>'}
    get_config "${CONFIG_FILE}" "option.migrate-branches"        ; MIGRATE_BRANCHES=${get_config-""}
    get_config "${CONFIG_FILE}" "option.no-convert-ignore-file"  ; IS_NO_CONVERT_IGNORE_FILES=${get_config:-0}
    get_config "${CONFIG_FILE}" "option.no-convert-empty-directory"  ; IS_NO_CONVERT_EMPTY_DIRECTORY=${get_config:-0}
    get_config "${CONFIG_FILE}" "option.no-convert-git-style-tag"; IS_NO_CONVERT_GIT_STYLE_TAG=${get_config:-0}
    get_config "${CONFIG_FILE}" "option.no-prune-empty"          ; IS_NO_PRUNE_EMTPY=${get_config:-0}
    get_config "${CONFIG_FILE}" "option.no-migrate-branches"     ; IS_NO_MIGRATE_BRANCHES=${get_config:-0}
    get_config "${CONFIG_FILE}" "option.no-migrate-tags"         ; IS_NO_MIGRATE_TAGS=${get_config:-0}

    # SVN Information
    PROJECT_SVN_UUID=$(svn info ${SVNROOT} | grep UUID | awk '{ print $3 }')

    # Project Information
    PROJECT_NAME=$(echo ${SVNROOT} | egrep -o "svn/(sandbox/)?.*" | sed "s/\/sandbox//g" | cut -d'/' -f 2)
    PROJECT_JSON_URL="https://www.seasar.org/members/project/${PROJECT_NAME}/json"
    PROJECT_LEADER=$(curl -s ${PROJECT_JSON_URL} | jq -r ".projectDescription.leader")
    PROJECT_MEMBER_LIST=$(curl -s ${PROJECT_JSON_URL} | jq -r ".memberUid[]")

    #
    # output
    #
    PROJECT_WORK_DIR="${WORK_DIR}/${REPOSITORY_NAME}"
    if [[ ! -d "${PROJECT_WORK_DIR}" ]]; then
        mkdir -p "${PROJECT_WORK_DIR}"
    fi
    PROJECT_WORK_GIT_DIR="${PROJECT_WORK_DIR}/${NAME}.git"

    # create author file for project
    PROJECT_AUTHOR_FILE="${PROJECT_WORK_DIR}/authors.txt"
    cat << '_EOF_' > ${PROJECT_AUTHOR_FILE}
httpd = The Seasar Project Administrator <admin@seasar.org>
apache = The Seasar Project Administrator <admin@seasar.org>
_EOF_
    for i in ${PROJECT_MEMBER_LIST}
    do
        MEMBER_UID="${i}"
        get_author_info "${MEMBER_UID}"
        echo "${get_author_info}" >> ${PROJECT_AUTHOR_FILE}
    done

    # migrate script
    MIGRATE_SCRIPT="${PROJECT_WORK_DIR}/migrate-run"
    cat << _EOF_ > "${MIGRATE_SCRIPT}"
#!/bin/sh

_EOF_

    # create git repository directory
    cat << _EOF_ > "${MIGRATE_SCRIPT}"
if [[ -d "${PROJECT_WORK_GIT_DIR}" ]]; then
    echo "git repository exists: ${PROJECT_WORK_GIT_DIR}"
    exit 1
fi

mkdir -p "${PROJECT_WORK_GIT_DIR}"
pushd "${PROJECT_WORK_GIT_DIR}"

_EOF_

    # git svn init
    cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# git svn init
git svn init \\
--trunk=${TRUNK} \\
--branches=${BRANCHES} \\
--tags=${TAGS} \\
--ignore-paths=${IGNORE_PATHS} \\
${SVNROOT}

_EOF_

    # git svn fetch
    cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# git svn fetch
git svn fetch --authors-file ${PROJECT_AUTHOR_FILE}

_EOF_

    # git config
    get_author_info "${PROJECT_LEADER}"
    PROJECT_LEADER_NAME=$(echo ${get_author_info} | cut -d'=' -f 2 | egrep -o ".*<" | tr -d "<" | sed "s/^ //" | sed "s/ $//")
    PROJECT_LEADER_MAIL=$(echo ${get_author_info} | cut -d'=' -f 2 | egrep -o "<.*>" | tr -d "<>")
    cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# git config
git config user.name "${PROJECT_LEADER_NAME}"
git config user.email ${PROJECT_LEADER_MAIL}

_EOF_

    # convert ignore files
    if [[ ${IS_NO_CONVERT_IGNORE_FILES} -eq 0 ]]; then
        cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# convert ignore files
${SCRIPT_DIR}/git-convert-ignore

_EOF_
    fi

    # convert empty directry
    if [[ ${IS_NO_CONVERT_EMPTY_DIRECTORY} -eq 0 ]]; then
        cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# convert empty directry
${SCRIPT_DIR}/git-convert-empty-directory

_EOF_
    fi

    # svn tags to git tags
    if [[ ${IS_NO_CONVERT_GIT_STYLE_TAG} -eq 0 ]]; then
        cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# svn tags to git tags
${SCRIPT_DIR}/svn-tags-to-git-tags > tmp-run
sh tmp-run
rm -f tmp-run

_EOF_
    fi

    # remove git-svn-id
    if [[ ${IS_REMOVE_GIT_SVN_ID} -eq 1 ]]; then
        cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# remove git-svn-id
${SCRIPT_DIR}/git-filter-remove-git-svn-id

_EOF_
    fi

    # replace empty commit messages
    if [[ ${IS_REPLACE_EMPTY_COMMIT_MESSAGES} -eq 1 ]]; then
        cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# replace empty commit messages
${SCRIPT_DIR}/git-filter-replace-empty-commit-messages "${REPLACE_EMPTY_COMMIT_MESSAGES_STRING}"

_EOF_
    fi

    # prune-empty
    if [[ ${IS_NO_PRUNE_EMTPY} -eq 0 ]]; then
        cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# prune empty
${SCRIPT_DIR}/git-filter-prune-empty

_EOF_
    fi

    # create repository
    cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# create repository
${SCRIPT_DIR}/git-create-repo-github ${REPOSITORY_NAME}

_EOF_

    # push master
    cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# push master
${SCRIPT_DIR}/git-push-master-to-github ${REPOSITORY_NAME}

_EOF_

    # push branches
    if [[ ${IS_NO_MIGRATE_BRANCHES} -eq 0 ]]; then
        cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# push bracnhes
${SCRIPT_DIR}/git-push-branches-to-github ${REPOSITORY_NAME} ${MIGRATE_BRANCHES}

_EOF_
    fi

    # push tags
    if [[ ${IS_NO_MIGRATE_TAGS} -eq 0 ]]; then
        cat << _EOF_ >> "${MIGRATE_SCRIPT}"
# push tags
${SCRIPT_DIR}/git-push-tags-to-github ${REPOSITORY_NAME}

_EOF_
    fi

    # end script
        cat << _EOF_ >> "${MIGRATE_SCRIPT}"
popd
_EOF_
    chmod 700 "${MIGRATE_SCRIPT}"

    echo "# ${REPOSITORY_NAME} migration script:"
    echo "${MIGRATE_SCRIPT}"
#    cat "${MIGRATE_SCRIPT}"
}

# Migrate repositories
migrate_repositories() {
    for REPOSITORY in ${@}; do
        CONFIG_FILE="${CONF_DIR}/${REPOSITORY}"
        if [[ -f "${CONFIG_FILE}" ]]; then
            migrate_repository ${REPOSITORY}
        else
            echo "Skip ${REPOSITORY}: ${CONFIG_FILE} not found."
        fi
    done
}

# Main
main() {
    [ $# -lt 1 ] && ( usage; exit 1 );

    # See how we're called.
    MIGRATE_ALL="no"
    while getopts ar:p:s: OPT; do
        case "${OPT}" in
            "a" )
                MIGRATE_ALL="yes" ;;
            "r" )
                MIGRATE_REPOSITORY="${OPTARG}";;
            "p" )
                REPOSITORY_PREFIX="${OPTARG}" ;;
            "s" )
                REPOSITORY_SUFFIX="${OPTARG}" ;;
            * )
                usage
                exit 1
                ;;
        esac
    done
    shift $((${OPTIND} - 1))

    # Create work directory
    if [[ ! -d "${WORK_DIR}" ]]; then
        mkdir "${WORK_DIR}"
    fi

    # Migration task
    if [[ "${MIGRATE_ALL}" = "yes" ]]; then
        migrate_repositories ${REPOSITORIES}
    else
        migrate_repositories ${MIGRATE_REPOSITORY}
    fi
}

[ ${#BASH_SOURCE[@]} = 1 ] && main "$@"
